local Libraries = {"task","os","utf8","table","string","math","debug","coroutine","buffer","bit32"}
function startswith(str, thing)
if str:sub(1, #thing) == thing then return true else return false end
end
function pKey(key)
  if startswith(tostring(key), "__") then
   return tostring(key)
  end
  if type(key) == "number" then
      return "["..tostring(key).."]"
  else
      return "[\"" .. tostring(key) .. "\"]"
  end
end
function GetFullName(instance)
 local p = instance
 local lo = {}
 while (p ~= game) do
  table.insert(lo, p)
  p = p.Parent
 end
 local fullName;
 if lo[#lo].ClassName ~= "Workspace" then
  fullName = "game:GetService(\"" .. lo[#lo].ClassName.."\")"
 else
  fullName = "workspace"
 end
 for i = #lo - 1, 1, -1 do
  fullName = fullName .. ":FindFirstChild(\"" .. lo[i].Name .. "\")"
 end
 return fullName
end
function processTableDescendants(tbl, indent)
  indent = indent or 0
  local result = ""
  for key, value in pairs(tbl) do
      if type(value) == "table" then
          result = result .. string.rep("  ", indent) .. pKey(key) .. " = {\n"
          result = result .. processTableDescendants(value, indent + 1)
          result = result .. string.rep("  ", indent) .. "}\n"
      elseif type(value) == "function" then
          result = result .. string.rep("  ", indent) .. pKey(key) .. " = function() --[[Function Source]] end" .. string.rep("  ", indent + 1)
      elseif typeof(value):lower() == "vector3" then
          result = result .. string.rep("  ", indent) .. pKey(key) .. " = Vector3.new(" .. tostring(value.X) .. ", " .. tostring(value.Y) .. ", " .. tostring(value.Z) .. ");\n"
      elseif typeof(value):lower() == "vector2" then
          result = result .. string.rep("  ", indent) .. pKey(key) .. " = Vector2.new(" .. tostring(value.X) .. ", " .. tostring(value.Y) .. ");\n"
      elseif typeof(value):lower() == "udim" then
          result = result .. string.rep("  ", indent) .. pKey(key) .. " = UDim.new(" .. tostring(value.Scale) .. ", " .. tostring(value.Offset) .. ");\n"
      elseif typeof(value):lower() == "udim2" then
          result = result .. string.rep("  ", indent) .. pKey(key) .. " = UDim2.new(" .. tostring(value.X.Scale) .. ", " .. tostring(value.X.Offset) .. ", " .. tostring(value.Y.Scale) .. ", " .. tostring(value.Y.Offset) .. ");\n"
      elseif typeof(value):lower() == "instance" then
        result = result .. string.rep("  ", indent) .. pKey(key) .. " = " .. GetFullName(value) .. ";\n"
    elseif typeof(value) == 'string' then
      result = result .. string.rep("  ", indent) .. pKey(key) .. " = \"" .. tostring(value) .. "\";\n"
    elseif typeof(value) == 'number' then
      result = result .. string.rep("  ", indent) .. pKey(key) .. " = " .. tostring(value) .. ";\n"
    elseif typeof(value) == "nil" then -- nil value
      result = result .. string.rep("  ", indent) .. pKey(key) .. " = " .. tostring(value) .. ";\n"
    else -- Enum/Other value
      result = result .. string.rep("  ", indent) .. pKey(key) .. " = " .. tostring(value) .. ";\n"
    end
  end

  return result
end
function DecompileFunction(func, excludename, indent)
 if not indent then indent = 1 end
 local count = 1
 local inf, String = debug.getinfo(func), "function " .. tostring(debug.getinfo(func).name) .. "("
 if excludename then String = "function(" end
 if tostring(inf.is_vararg) == "1" then
  String = String .. "...)\n"
 else
  local ab = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}
  if inf.numparams > 0 then
  if inf.numparams > #ab then
    for i = 1, #ab do
      String = String .. ab[i] .. ", "
    end
    String = String .. "...)"
  else
  for i = 1, inf.numparams, 1 do
    String = String .. ab[i]
    if i < inf.numparams then String = String .. ", " else String = String .. ")\n" end
  end
  end
  elseif inf.numparams == 0 then
    String = String .. ")\n"
  end
  end
 StringHolder = String
 String = ""
 for i, v in getupvalues(func) do
  if type(v) == "table" then
   String = String .. string.format("\nlocal v%s = {\n%s}", tostring(count), processTableDescendants(v, 1))
   if getmetatable(v) ~= nil then
    local m = getmetatable(v)
    for _, thing in m do
      if tostring(_):sub(1,2) == "__" then -- metamethod
        if type(thing) == "table" then
          String = String .. ("v%d.%s = {\n%s\n}"):format(count, tostring(_), processTableDescendants(m[_], 1))
        elseif type(thing) == "function" then
          String = String .. ("v%d.%s = %s"):format(count, _, DecompileFunction(thing, true, indent))
         end
      end
    end
   end
  elseif typeof(v):lower() == "vector2" then String = String.. ("\nlocal v%s = Vector2.new(%d, %d)"):format(tostring(count), v.X, v.Y) elseif typeof(v):lower() == "vector3" then String = String .. ("\nlocal v%s = Vector3.new(%d, %d, %d)"):format(tostring(count), v.X, v.Y, v.Z) elseif typeof(v):lower() == "udim" then String = String .. ("\nlocal v%s = UDim.new(%d, %d)"):format(tostring(count), v.Scale, v.Offset) elseif typeof(v):lower() == "udim2" then String = String .. ("\nlocal v%s = UDim2.new(%d, %d, %d, %d)"):format(tostring(count), v.X.Scale, v.X.Offset, v.Y.Scale, v.Y.Offset) elseif typeof(v):lower() == "number" then String = String .. ("\nlocal v%s = %s"):format(tostring(count), tostring(v)) elseif typeof(v):lower() == 'instance' then String = String .. ("\nlocal v%s = game.%s"):format(tostring(count), v:GetFullName())
    end
    count+=1
  end
 if #getupvalues(func) == 0 then
  String = StringHolder
 else
  String = "--upvalues:" .. String .. "\n" .. StringHolder
 end
 local robloxfunctions = ""
 local found = 0
 for i, v in getconstants(func) do
  for _, hgwE2 in getrenv() do
    if v == _ and type(hgwE2) == "function" then
      if table.find(Libraries, getconstants(func)[i - 1]) then
       robloxfunctions = robloxfunctions .. string.rep(" ", indent + 1) .. getconstants(func)[i - 1] .. "." .. v .. "()" .. " -- local v" .. tostring(count - 1) .. " and v" .. tostring(count) .. "\n"
      else
       robloxfunctions = robloxfunctions .. string.rep(" ", indent + 1) .. v .. "()" .. " -- local v" .. tostring(count) .. "\n"
      end
      found+=1
    end
  end
  if typeof(v) == "table" then
    String = String .. string.format(" local v%s = {\n%s}\n", tostring(count), processTableDescendants(v, 1))
    elseif typeof(v) == "string" then String = String .. string.format(" local v%s = '%s'\n", tostring(count), tostring(v)) else String = String .. string.format(" local v%s = %s\n", tostring(count), tostring(v)) end
   count+=1
 end
  String = String .. ("%s--[[\n%sFound %d roblox functions in the constants."):format(string.rep(" ", indent),string.rep(" ", indent), found)
  if found > 0 then
   String = String .. "\n" .. robloxfunctions
  end
  String = String .. ("%s]]"):format(string.rep(" ", indent))
 for i, v in getprotos(func) do
  String = String .. ("\n local %s\n"):format(DecompileFunction(v, false, indent + 1))
 end
 return String .. "\n" .. string.rep(" ", indent) .. "end"
end
function DecompileScript(Script)
 if Script.ClassName == "ModuleScript" then Script = require(Script) end
 local Decompiled = ""
 for i, v in getsenv(Script) do
  if type(v) == "table" then
   if #v == 0 then Decompiled = Decompiled .. ("local %s = {}"):format(tostring(i)) else
    Decompiled = Decompiled .. ("local %s = {\n%s\n}"):format(tostring(i), processTableDescendants(v, 1)) end
   elseif type(v) == "function" then Decompiled = Decompiled .. ("local %s = %s\n"):format(tostring(i), DecompileFunction(v, true, 0)) end
 end
 return Decompiled
end
getgenv().decompile = DecompileScript
